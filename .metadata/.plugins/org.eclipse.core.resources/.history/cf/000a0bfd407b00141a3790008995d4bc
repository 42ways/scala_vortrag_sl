// n-queens from "Programming in Scala", p. 484 ff.

object queens {

  def queens(n: Int): List[List[(Int, Int)]] = {
    def placeQueens(k: Int): List[List[(Int, Int)]] =
      if (k == 0)
        List(List())
      else
        for {
          queens <- placeQueens(k - 1)
          column <- 1 to n
          queen = (k, column)
          if isSafe(queen, queens)
        } yield queen :: queens

    def isSafe(queen: (Int, Int), queens: List[(Int, Int)]) =
      queens forall (q => !inCheck(queen, q))

    def inCheck(q1: (Int, Int), q2: (Int, Int)) =
      q1._1 == q2._1 || q1._2 == q2._2 || (q1._1 - q2._1).abs == (q1._2 - q2._2).abs

    placeQueens(n)
  }                                               //> queens: (n: Int)List[List[(Int, Int)]]

  queens(8).length                                //> res0: List[List[(Int, Int)]] = List(List((8,4), (7,2), (6,7), (5,3), (4,6), 
                                                  //| (3,8), (2,5), (1,1)), List((8,5), (7,2), (6,4), (5,7), (4,3), (3,8), (2,6), 
                                                  //| (1,1)), List((8,3), (7,5), (6,2), (5,8), (4,6), (3,4), (2,7), (1,1)), List((
                                                  //| 8,3), (7,6), (6,4), (5,2), (4,8), (3,5), (2,7), (1,1)), List((8,5), (7,7), (
                                                  //| 6,1), (5,3), (4,8), (3,6), (2,4), (1,2)), List((8,4), (7,6), (6,8), (5,3), (
                                                  //| 4,1), (3,7), (2,5), (1,2)), List((8,3), (7,6), (6,8), (5,1), (4,4), (3,7), (
                                                  //| 2,5), (1,2)), List((8,5), (7,3), (6,8), (5,4), (4,7), (3,1), (2,6), (1,2)), 
                                                  //| List((8,5), (7,7), (6,4), (5,1), (4,3), (3,8), (2,6), (1,2)), List((8,4), (7
                                                  //| ,1), (6,5), (5,8), (4,6), (3,3), (2,7), (1,2)), List((8,3), (7,6), (6,4), (5
                                                  //| ,1), (4,8), (3,5), (2,7), (1,2)), List((8,4), (7,7), (6,5), (5,3), (4,1), (3
                                                  //| ,6), (2,8), (1,2)), List((8,6), (7,4), (6,2), (5,8), (4,5), (3,7), (2,1), (1
                                                  //| ,3)), List((8,6), (7,4), (6,7), (5,1), (4,8), (3,2), (2,5), (1,3)), List((8,
                                                  //| 1), (7,7), (6,4), (5,6),
                                                  //| Output exceeds cutoff limit.
  
}